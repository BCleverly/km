---
description: Testing patterns and best practices using Pest and browser testing for the Kink Master platform
globs: tests/**/*.php
---

# Testing Patterns & Best Practices

## Pest Testing Framework

This project uses Pest v4 for all testing, which provides powerful features including browser testing, smoke testing, and visual regression testing.

## Test Structure & Organization

### Basic Test Template
```php
<?php

use App\Models\User;
use App\Models\Task;
use Livewire\Livewire;

it('can perform a specific action', function () {
    // Arrange
    $user = User::factory()->create();
    
    // Act
    $result = $user->performAction();
    
    // Assert
    expect($result)->toBeTrue();
});
```

### Feature Test Structure
```php
<?php

use App\Livewire\Tasks\CreateTask;
use App\Models\User;
use Livewire\Livewire;

beforeEach(function () {
    $this->user = User::factory()->create();
    $this->actingAs($this->user);
});

it('can create a task', function () {
    Livewire::test(CreateTask::class)
        ->set('title', 'Test Task')
        ->set('description', 'Test Description')
        ->call('save')
        ->assertHasNoErrors()
        ->assertRedirect('/tasks');
        
    $this->assertDatabaseHas('tasks', [
        'title' => 'Test Task',
        'description' => 'Test Description',
        'user_id' => $this->user->id,
    ]);
});
```

## Livewire Component Testing

### Testing Livewire Components
```php
it('can interact with Livewire component', function () {
    $user = User::factory()->create();
    
    Livewire::actingAs($user)
        ->test(CreateTask::class)
        ->assertSee('Create Task')
        ->set('title', 'New Task')
        ->set('description', 'Task description')
        ->call('save')
        ->assertNotified()
        ->assertRedirect();
});
```

### Testing Form Validation
```php
it('validates required fields', function () {
    Livewire::test(CreateTask::class)
        ->set('title', '')
        ->set('description', '')
        ->call('save')
        ->assertHasErrors(['title' => 'required'])
        ->assertHasErrors(['description' => 'required']);
});
```

### Testing Component State
```php
it('manages component state correctly', function () {
    $user = User::factory()->create();
    
    Livewire::actingAs($user)
        ->test(TaskDashboard::class)
        ->assertSet('isLoading', false)
        ->call('loadTasks')
        ->assertSet('isLoading', true)
        ->assertSet('tasks', $user->tasks);
});
```

## Database Testing

### Factory Usage
```php
beforeEach(function () {
    $this->user = User::factory()->create([
        'user_type' => TargetUserType::Couple,
        'subscription_plan' => SubscriptionPlan::Free,
    ]);
    
    $this->user->profile()->create([
        'username' => 'testuser',
        'bdsm_role' => BdsmRole::Dominant,
    ]);
});
```

### Database Assertions
```php
it('creates records in database', function () {
    $user = User::factory()->create();
    
    $task = Task::create([
        'user_id' => $user->id,
        'title' => 'Test Task',
        'description' => 'Test Description',
    ]);
    
    $this->assertDatabaseHas('tasks', [
        'user_id' => $user->id,
        'title' => 'Test Task',
    ]);
    
    $this->assertDatabaseMissing('tasks', [
        'title' => 'Non-existent Task',
    ]);
});
```

### Testing Relationships
```php
it('maintains model relationships', function () {
    $user = User::factory()->create();
    $task = Task::factory()->create(['user_id' => $user->id]);
    
    expect($task->user)->toBeInstanceOf(User::class);
    expect($task->user->id)->toBe($user->id);
    expect($user->tasks)->toHaveCount(1);
});
```

## Authentication & Authorization Testing

### Testing Authentication
```php
it('requires authentication', function () {
    $this->get('/dashboard')
        ->assertRedirect('/login');
});

it('allows authenticated users', function () {
    $user = User::factory()->create();
    
    $this->actingAs($user)
        ->get('/dashboard')
        ->assertOk();
});
```

### Testing Authorization
```php
it('enforces role-based access', function () {
    $user = User::factory()->create();
    $admin = User::factory()->create();
    $admin->assignRole('Admin');
    
    $this->actingAs($user)
        ->get('/admin/users')
        ->assertForbidden();
        
    $this->actingAs($admin)
        ->get('/admin/users')
        ->assertOk();
});
```

## Notification Testing

### Testing Notifications
```php
it('sends notifications when task is assigned', function () {
    Notification::fake();
    
    $user = User::factory()->create();
    $task = Task::factory()->create();
    
    $user->notify(new TaskAssigned($task));
    
    Notification::assertSentTo($user, TaskAssigned::class);
});
```

### Testing Email Notifications
```php
it('sends email notification', function () {
    Mail::fake();
    
    $user = User::factory()->create();
    
    $user->notify(new WelcomeEmail($user));
    
    Mail::assertSent(WelcomeEmail::class, function ($mail) use ($user) {
        return $mail->hasTo($user->email);
    });
});
```

## Browser Testing (Pest v4)

### Basic Browser Test
```php
it('can interact with the application in browser', function () {
    $user = User::factory()->create();
    
    $page = visit('/login')
        ->fill('email', $user->email)
        ->fill('password', 'password')
        ->click('Sign In')
        ->assertSee('Dashboard')
        ->assertNoJavascriptErrors();
});
```

### Testing User Interactions
```php
it('can create a task through the UI', function () {
    $user = User::factory()->create();
    
    $this->actingAs($user);
    
    $page = visit('/tasks/create')
        ->fill('title', 'New Task')
        ->fill('description', 'Task description')
        ->click('Create Task')
        ->assertSee('Task created successfully')
        ->assertNoJavascriptErrors();
});
```

### Testing Real-time Features
```php
it('shows real-time updates', function () {
    $user = User::factory()->create();
    
    $this->actingAs($user);
    
    $page = visit('/dashboard')
        ->assertSee('No active tasks')
        ->click('Get New Task')
        ->assertSee('New task assigned')
        ->assertNoJavascriptErrors();
});
```

## Mocking & Faking

### Mocking External Services
```php
it('handles external service failures', function () {
    Http::fake([
        'api.stripe.com/*' => Http::response(['error' => 'Payment failed'], 400),
    ]);
    
    $user = User::factory()->create();
    
    $this->actingAs($user)
        ->post('/subscription/create', ['plan' => 'premium'])
        ->assertSessionHas('error', 'Payment processing failed');
});
```

### Faking Events
```php
it('dispatches events correctly', function () {
    Event::fake();
    
    $user = User::factory()->create();
    $task = Task::factory()->create();
    
    $user->completeTask($task);
    
    Event::assertDispatched(TaskCompleted::class);
});
```

## Test Data Management

### Using Factories
```php
// Create single record
$user = User::factory()->create();

// Create with specific attributes
$user = User::factory()->create([
    'email' => 'test@example.com',
    'user_type' => TargetUserType::Couple,
]);

// Create multiple records
$users = User::factory()->count(5)->create();

// Create with relationships
$user = User::factory()
    ->has(Task::factory()->count(3))
    ->create();
```

### Using States
```php
// Define factory states
User::factory()->admin()->create();
User::factory()->couple()->create();
User::factory()->withSubscription()->create();
```

## Performance Testing

### Testing Query Performance
```php
it('does not cause N+1 queries', function () {
    $users = User::factory()->count(10)->create();
    
    foreach ($users as $user) {
        Task::factory()->count(3)->create(['user_id' => $user->id]);
    }
    
    $this->assertQueryCount(2, function () {
        $users = User::with('tasks')->get();
        foreach ($users as $user) {
            $user->tasks->count();
        }
    });
});
```

## Test Organization

### Grouping Tests
```php
describe('User Authentication', function () {
    it('can login with valid credentials', function () {
        // Test implementation
    });
    
    it('cannot login with invalid credentials', function () {
        // Test implementation
    });
});

describe('Task Management', function () {
    it('can create tasks', function () {
        // Test implementation
    });
    
    it('can complete tasks', function () {
        // Test implementation
    });
});
```

### Using Datasets
```php
it('validates email formats', function (string $email, bool $expected) {
    $user = User::factory()->make(['email' => $email]);
    
    expect($user->isValidEmail())->toBe($expected);
})->with([
    ['valid@example.com', true],
    ['invalid-email', false],
    ['test@domain.co.uk', true],
    ['user@sub.domain.com', true],
]);
```

## Best Practices

### 1. Test Structure
- Use the Arrange-Act-Assert pattern
- Keep tests focused on single behaviors
- Use descriptive test names
- Group related tests with `describe()`

### 2. Test Data
- Use factories for consistent test data
- Create minimal data needed for each test
- Use `beforeEach()` for common setup
- Clean up after tests with `RefreshDatabase`

### 3. Assertions
- Use specific assertions (`assertOk()`, `assertRedirect()`)
- Test both success and failure cases
- Verify database state changes
- Check for proper error handling

### 4. Livewire Testing
- Test component state changes
- Verify form validation
- Check event dispatching
- Test user interactions

### 5. Browser Testing
- Test critical user journeys
- Verify JavaScript functionality
- Check for console errors
- Test responsive behavior

### 6. Performance
- Avoid N+1 query problems
- Test with realistic data volumes
- Monitor test execution time
- Use appropriate test isolation

### 7. Maintenance
- Keep tests up to date with code changes
- Remove obsolete tests
- Refactor common test patterns
- Use meaningful test descriptions