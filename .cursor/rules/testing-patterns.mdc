---
description: Testing patterns and best practices using Pest and browser testing for the Kink Master platform
globs: tests/**/*.php
---

# Testing Patterns & Best Practices

## Testing Architecture in Kink Master

This project uses Pest v4 for comprehensive testing, including unit tests, feature tests, and browser tests. All tests follow consistent patterns for maintainability and reliability.

## Test Structure

### Test Organization
```
tests/
├── Feature/           # Feature tests (HTTP, API, Livewire)
├── Unit/             # Unit tests (models, services, actions)
├── Browser/          # Browser tests (E2E testing)
├── Pest.php          # Pest configuration
└── TestCase.php      # Base test case
```

### Base Test Case
```php
<?php

namespace Tests;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\TestCase as BaseTestCase;

abstract class TestCase extends BaseTestCase
{
    use CreatesApplication, RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp();
        
        // Seed roles and permissions
        $this->seed(\Database\Seeders\RolesAndPermissionsSeeder::class);
    }
}
```

## Feature Testing Patterns

### Authentication Tests
```php
<?php

use App\Models\User;
use App\TargetUserType;

it('can register a new user', function () {
    $userData = [
        'name' => 'John Doe',
        'email' => 'john@example.com',
        'password' => 'password',
        'password_confirmation' => 'password',
        'user_type' => TargetUserType::Male,
    ];

    $response = $this->post('/register', $userData);

    $response->assertRedirect('/dashboard');
    $this->assertDatabaseHas('users', [
        'email' => 'john@example.com',
        'user_type' => TargetUserType::Male,
    ]);
});

it('can login with valid credentials', function () {
    $user = User::factory()->create();

    $response = $this->post('/login', [
        'email' => $user->email,
        'password' => 'password',
    ]);

    $response->assertRedirect('/dashboard');
    $this->assertAuthenticatedAs($user);
});

it('cannot login with invalid credentials', function () {
    $user = User::factory()->create();

    $response = $this->post('/login', [
        'email' => $user->email,
        'password' => 'wrong-password',
    ]);

    $response->assertSessionHasErrors('email');
    $this->assertGuest();
});
```

### Model Tests
```php
<?php

use App\Models\Tasks\Task;
use App\Models\User;
use App\ContentStatus;
use App\TargetUserType;

it('can create a task', function () {
    $user = User::factory()->create();
    
    $task = Task::factory()->create([
        'user_id' => $user->id,
        'title' => 'Test Task',
        'description' => 'Test Description',
        'difficulty_level' => 5,
        'target_user_type' => TargetUserType::Any,
        'status' => ContentStatus::Pending,
    ]);

    expect($task->title)->toBe('Test Task');
    expect($task->author)->toBeInstanceOf(User::class);
    expect($task->status)->toBe(ContentStatus::Pending);
});

it('can scope approved tasks', function () {
    Task::factory()->create(['status' => ContentStatus::Pending]);
    Task::factory()->create(['status' => ContentStatus::Approved]);
    Task::factory()->create(['status' => ContentStatus::Rejected]);

    $approvedTasks = Task::approved()->get();

    expect($approvedTasks)->toHaveCount(1);
    expect($approvedTasks->first()->status)->toBe(ContentStatus::Approved);
});

it('can calculate task deadline', function () {
    $task = Task::factory()->create([
        'duration_time' => 2,
        'duration_type' => 'hours',
    ]);

    $deadline = $task->calculateDeadline(now());

    expect($deadline)->toBeInstanceOf(\DateTimeInterface::class);
    expect($deadline->diffInHours(now()))->toBe(2);
});
```

### Livewire Component Tests
```php
<?php

use App\Livewire\CreateTask;
use App\Models\User;
use App\TargetUserType;
use Livewire\Livewire;

it('can create a task via livewire', function () {
    $user = User::factory()->create();
    $user->assignRole('user');

    Livewire::actingAs($user)
        ->test(CreateTask::class)
        ->set('form.title', 'Test Task')
        ->set('form.description', 'Test Description')
        ->set('form.difficulty_level', 5)
        ->set('form.target_user_type', TargetUserType::Any)
        ->call('save')
        ->assertHasNoErrors()
        ->assertRedirect('/tasks');

    $this->assertDatabaseHas('tasks', [
        'title' => 'Test Task',
        'description' => 'Test Description',
        'user_id' => $user->id,
    ]);
});

it('validates required fields in livewire form', function () {
    $user = User::factory()->create();

    Livewire::actingAs($user)
        ->test(CreateTask::class)
        ->set('form.title', '')
        ->set('form.description', '')
        ->call('save')
        ->assertHasErrors(['form.title', 'form.description']);
});

it('can search tasks in livewire component', function () {
    $user = User::factory()->create();
    $task1 = Task::factory()->create(['title' => 'First Task']);
    $task2 = Task::factory()->create(['title' => 'Second Task']);

    Livewire::actingAs($user)
        ->test(TaskList::class)
        ->set('search', 'First')
        ->assertSee('First Task')
        ->assertDontSee('Second Task');
});
```

### API Tests
```php
<?php

use App\Models\User;
use App\Models\Tasks\Task;
use App\TargetUserType;

it('can request new task via api', function () {
    $user = User::factory()->create();
    $task = Task::factory()->create([
        'status' => ContentStatus::Approved,
        'target_user_type' => $user->user_type,
    ]);

    $response = $this->actingAs($user, 'sanctum')
        ->postJson('/api/v1/tasks/request');

    $response->assertSuccessful()
        ->assertJsonStructure([
            'data' => [
                'id',
                'title',
                'description',
                'difficulty_level',
            ]
        ]);

    $this->assertDatabaseHas('user_assigned_tasks', [
        'user_id' => $user->id,
        'task_id' => $task->id,
        'status' => 'assigned',
    ]);
});

it('can complete task via api', function () {
    $user = User::factory()->create();
    $assignedTask = UserAssignedTask::factory()->create([
        'user_id' => $user->id,
        'status' => 'assigned',
    ]);

    $response = $this->actingAs($user, 'sanctum')
        ->postJson("/api/v1/assigned-tasks/{$assignedTask->id}/complete");

    $response->assertSuccessful();

    $this->assertDatabaseHas('user_assigned_tasks', [
        'id' => $assignedTask->id,
        'status' => 'completed',
    ]);
});

it('requires authentication for api endpoints', function () {
    $response = $this->postJson('/api/v1/tasks/request');

    $response->assertUnauthorized();
});
```

## Browser Testing Patterns

### Basic Browser Test
```php
<?php

use App\Models\User;
use App\Models\Tasks\Task;
use App\ContentStatus;
use App\TargetUserType;

it('can complete a task through the browser', function () {
    $user = User::factory()->create();
    $task = Task::factory()->create([
        'status' => ContentStatus::Approved,
        'target_user_type' => $user->user_type,
    ]);

    $this->actingAs($user)
        ->visit('/dashboard')
        ->click('Get New Task')
        ->assertSee($task->title)
        ->click('I Completed This')
        ->assertSee('Task completed successfully!');
});

it('can browse tasks with filters', function () {
    $user = User::factory()->create();
    
    Task::factory()->create([
        'title' => 'Easy Task',
        'difficulty_level' => 2,
        'target_user_type' => TargetUserType::Any,
        'status' => ContentStatus::Approved,
    ]);
    
    Task::factory()->create([
        'title' => 'Hard Task',
        'difficulty_level' => 8,
        'target_user_type' => TargetUserType::Any,
        'status' => ContentStatus::Approved,
    ]);

    $this->actingAs($user)
        ->visit('/tasks')
        ->select('difficulty_level', '1-3')
        ->click('Filter')
        ->assertSee('Easy Task')
        ->assertDontSee('Hard Task');
});

it('can submit new task through browser', function () {
    $user = User::factory()->create();
    $user->assignRole('user');

    $this->actingAs($user)
        ->visit('/tasks/create')
        ->type('New Task', 'title')
        ->type('Task description', 'description')
        ->select('difficulty_level', '5')
        ->select('target_user_type', TargetUserType::Any)
        ->click('Submit Task')
        ->assertSee('Task submitted successfully!')
        ->assertPathIs('/tasks');
});
```

### Advanced Browser Testing
```php
<?php

use App\Models\User;
use App\Models\Tasks\Task;
use App\ContentStatus;

it('can handle real-time notifications', function () {
    $user = User::factory()->create();
    
    $this->actingAs($user)
        ->visit('/dashboard')
        ->assertNoJavascriptErrors();

    // Simulate task assignment via API
    $task = Task::factory()->create([
        'status' => ContentStatus::Approved,
        'target_user_type' => $user->user_type,
    ]);

    $this->actingAs($user, 'sanctum')
        ->postJson('/api/v1/tasks/request');

    // Check for notification in browser
    $this->actingAs($user)
        ->visit('/dashboard')
        ->assertSee('New task assigned!');
});

it('can handle form validation errors', function () {
    $user = User::factory()->create();

    $this->actingAs($user)
        ->visit('/tasks/create')
        ->click('Submit Task')
        ->assertSee('The title field is required')
        ->assertSee('The description field is required');
});

it('can handle authentication redirects', function () {
    $this->visit('/dashboard')
        ->assertRedirect('/login');
});
```

## Unit Testing Patterns

### Service Tests
```php
<?php

use App\Services\UserStatsService;
use App\Models\User;
use App\Models\Tasks\UserAssignedTask;
use App\TaskStatus;

it('calculates user stats correctly', function () {
    $user = User::factory()->create();
    
    UserAssignedTask::factory()->count(5)->create([
        'user_id' => $user->id,
        'status' => TaskStatus::Completed,
    ]);
    
    UserAssignedTask::factory()->count(2)->create([
        'user_id' => $user->id,
        'status' => TaskStatus::Failed,
    ]);

    $stats = new UserStatsService($user);

    expect($stats->getCompletedTasksCount())->toBe(5);
    expect($stats->getFailedTasksCount())->toBe(2);
    expect($stats->getSuccessRate())->toBe(71.43);
});

it('handles zero tasks gracefully', function () {
    $user = User::factory()->create();
    $stats = new UserStatsService($user);

    expect($stats->getCompletedTasksCount())->toBe(0);
    expect($stats->getFailedTasksCount())->toBe(0);
    expect($stats->getSuccessRate())->toBe(0);
});
```

### Action Tests
```php
<?php

use App\Actions\Tasks\RequestNewTask;
use App\Models\User;
use App\Models\Tasks\Task;
use App\ContentStatus;
use App\TargetUserType;

it('can request new task', function () {
    $user = User::factory()->create();
    $task = Task::factory()->create([
        'status' => ContentStatus::Approved,
        'target_user_type' => $user->user_type,
    ]);

    $action = new RequestNewTask();
    $result = $action->execute($user);

    expect($result)->toBeInstanceOf(UserAssignedTask::class);
    expect($result->user_id)->toBe($user->id);
    expect($result->task_id)->toBe($task->id);
    expect($result->status)->toBe(TaskStatus::Assigned);
});

it('throws exception when no tasks available', function () {
    $user = User::factory()->create();

    $action = new RequestNewTask();

    expect(fn() => $action->execute($user))
        ->toThrow(\Exception::class, 'No tasks available');
});
```

## Test Data Patterns

### Factory Usage
```php
<?php

use App\Models\User;
use App\Models\Tasks\Task;
use App\TargetUserType;
use App\ContentStatus;

it('uses factories correctly', function () {
    // Basic factory usage
    $user = User::factory()->create();
    
    // Factory with specific attributes
    $task = Task::factory()->create([
        'title' => 'Custom Task',
        'difficulty_level' => 8,
    ]);
    
    // Factory with relationships
    $taskWithAuthor = Task::factory()
        ->for(User::factory()->create(), 'author')
        ->create();
    
    // Factory states
    $approvedTask = Task::factory()->approved()->create();
    $premiumTask = Task::factory()->premium()->create();
});
```

### Database Seeding
```php
<?php

use App\Models\User;
use App\Models\Tasks\Task;

it('can seed test data', function () {
    $this->seed(\Database\Seeders\TaskDataSeeder::class);
    
    expect(Task::count())->toBeGreaterThan(0);
    expect(User::count())->toBeGreaterThan(0);
});

it('can use specific seeders', function () {
    $this->seed([
        \Database\Seeders\RolesAndPermissionsSeeder::class,
        \Database\Seeders\TaskDataSeeder::class,
    ]);
    
    expect(User::role('admin')->count())->toBeGreaterThan(0);
});
```

## Test Helpers and Utilities

### Custom Test Helpers
```php
<?php

// In tests/TestCase.php
protected function createUserWithRole(string $role): User
{
    $user = User::factory()->create();
    $user->assignRole($role);
    return $user;
}

protected function createApprovedTask(array $attributes = []): Task
{
    return Task::factory()->create(array_merge([
        'status' => ContentStatus::Approved,
    ], $attributes));
}

protected function assertTaskAssigned(User $user, Task $task): void
{
    $this->assertDatabaseHas('user_assigned_tasks', [
        'user_id' => $user->id,
        'task_id' => $task->id,
        'status' => TaskStatus::Assigned,
    ]);
}
```

### API Test Helpers
```php
<?php

// In tests/TestCase.php
protected function apiAs(User $user, string $endpoint, array $data = []): \Illuminate\Testing\TestResponse
{
    return $this->actingAs($user, 'sanctum')
        ->postJson($endpoint, $data);
}

protected function apiGetAs(User $user, string $endpoint): \Illuminate\Testing\TestResponse
{
    return $this->actingAs($user, 'sanctum')
        ->getJson($endpoint);
}
```

## Performance Testing

### Database Performance
```php
<?php

use App\Models\Tasks\Task;

it('can handle large datasets efficiently', function () {
    // Create large dataset
    Task::factory()->count(1000)->create();
    
    $startTime = microtime(true);
    
    $tasks = Task::approved()
        ->with('author')
        ->paginate(50);
    
    $endTime = microtime(true);
    $executionTime = $endTime - $startTime;
    
    expect($executionTime)->toBeLessThan(1.0); // Should complete in under 1 second
    expect($tasks->count())->toBe(50);
});
```

## Test Configuration

### Pest Configuration
```php
<?php

// In tests/Pest.php
uses(Tests\TestCase::class)->in('Feature', 'Unit');

uses(Tests\TestCase::class, RefreshDatabase::class)->in('Feature');

uses(Tests\TestCase::class, RefreshDatabase::class, LaravelDusk::class)->in('Browser');

// Global test helpers
function createUser(array $attributes = []): User
{
    return User::factory()->create($attributes);
}

function createTask(array $attributes = []): Task
{
    return Task::factory()->create($attributes);
}

function actingAsUser(User $user = null): void
{
    test()->actingAs($user ?? createUser());
}
```

## Best Practices

### 1. Test Organization
- Group related tests in describe blocks
- Use descriptive test names
- Keep tests focused on single behaviors
- Use factories for test data

### 2. Test Data
- Use factories instead of manual data creation
- Create realistic test scenarios
- Use database transactions for isolation
- Clean up test data properly

### 3. Assertions
- Use specific assertions over generic ones
- Test both positive and negative cases
- Verify database state changes
- Check for proper error handling

### 4. Performance
- Use RefreshDatabase for feature tests
- Optimize database queries in tests
- Use factories efficiently
- Avoid unnecessary API calls

### 5. Maintenance
- Keep tests simple and readable
- Update tests when requirements change
- Use consistent naming conventions
- Document complex test scenarios