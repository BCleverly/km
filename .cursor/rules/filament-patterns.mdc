---
description: Filament admin panel development patterns and best practices for the Kink Master platform
globs: app/Filament/**/*.php
---

# Filament Admin Panel Patterns

## Filament v4 Architecture

This project uses Filament v4, which is a Server-Driven UI (SDUI) framework built on Livewire, Alpine.js, and Tailwind CSS. All admin interfaces are defined in PHP using structured configuration objects.

## Resource Structure

### Basic Resource Template
```php
<?php

namespace App\Filament\Resources\Users;

use App\Filament\Resources\Users\Pages\CreateUser;
use App\Filament\Resources\Users\Pages\EditUser;
use App\Filament\Resources\Users\Pages\ListUsers;
use App\Filament\Resources\Users\Schemas\UserForm;
use App\Filament\Resources\Users\Tables\UsersTable;
use App\Models\User;
use BackedEnum;
use Filament\Resources\Resource;
use Filament\Schemas\Schema;
use Filament\Support\Icons\Heroicon;
use Filament\Tables\Table;

class UserResource extends Resource
{
    protected static ?string $model = User::class;
    protected static string|BackedEnum|null $navigationIcon = Heroicon::OutlinedRectangleStack;
    protected static ?string $recordTitleAttribute = 'username';

    public static function form(Schema $schema): Schema
    {
        return UserForm::configure($schema);
    }

    public static function table(Table $table): Table
    {
        return UsersTable::configure($table);
    }

    public static function getPages(): array
    {
        return [
            'index' => ListUsers::route('/'),
            'create' => CreateUser::route('/create'),
            'edit' => EditUser::route('/{record}/edit'),
        ];
    }
}
```

## Form Schema Patterns

### Form Schema Class
```php
<?php

namespace App\Filament\Resources\Users\Schemas;

use App\Enums\BdsmRole;
use App\Enums\SubscriptionPlan;
use App\TargetUserType;
use Filament\Forms\Components\Select;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Components\Toggle;
use Filament\Schemas\Components\Grid;
use Filament\Schemas\Components\Section;
use Filament\Schemas\Schema;

class UserForm
{
    public static function configure(Schema $schema): Schema
    {
        return $schema
            ->schema([
                Section::make('User Information')
                    ->schema([
                        Grid::make(2)
                            ->schema([
                                TextInput::make('name')
                                    ->required()
                                    ->maxLength(255),
                                
                                TextInput::make('email')
                                    ->email()
                                    ->required()
                                    ->unique(ignoreRecord: true),
                            ]),
                        
                        Select::make('user_type')
                            ->options(TargetUserType::options())
                            ->required(),
                            
                        Select::make('subscription_plan')
                            ->options(SubscriptionPlan::options())
                            ->required(),
                    ]),
                    
                Section::make('Profile')
                    ->schema([
                        TextInput::make('profile.username')
                            ->maxLength(255),
                            
                        Select::make('profile.bdsm_role')
                            ->options(BdsmRole::options()),
                            
                        Toggle::make('profile.is_public')
                            ->label('Public Profile'),
                    ]),
            ]);
    }
}
```

### Form Component Patterns
```php
// Text inputs with validation
TextInput::make('title')
    ->required()
    ->maxLength(255)
    ->columnSpanFull(),

// Select with enum options
Select::make('status')
    ->options(ContentStatus::options())
    ->required()
    ->default(ContentStatus::Draft),

// Relationship selects
Select::make('user_id')
    ->relationship('user', 'name')
    ->searchable()
    ->preload()
    ->required(),

// Conditional fields
Select::make('type')
    ->options([
        'single' => 'Single',
        'multiple' => 'Multiple',
    ])
    ->reactive(),

TextInput::make('quantity')
    ->visible(fn (Get $get) => $get('type') === 'multiple')
    ->required(fn (Get $get) => $get('type') === 'multiple'),
```

## Table Configuration

### Table Schema Class
```php
<?php

namespace App\Filament\Resources\Users\Tables;

use App\Enums\SubscriptionPlan;
use Filament\Tables\Actions\Action;
use Filament\Tables\Actions\BulkAction;
use Filament\Tables\Actions\DeleteAction;
use Filament\Tables\Actions\EditAction;
use Filament\Tables\Columns\TextColumn;
use Filament\Tables\Columns\ToggleColumn;
use Filament\Tables\Filters\SelectFilter;
use Filament\Tables\Table;

class UsersTable
{
    public static function configure(Table $table): Table
    {
        return $table
            ->columns([
                TextColumn::make('name')
                    ->searchable()
                    ->sortable(),
                    
                TextColumn::make('email')
                    ->searchable()
                    ->sortable(),
                    
                TextColumn::make('subscription_plan')
                    ->badge()
                    ->color(fn (SubscriptionPlan $state) => match ($state) {
                        SubscriptionPlan::Free => 'gray',
                        SubscriptionPlan::Premium => 'success',
                        SubscriptionPlan::Lifetime => 'warning',
                        default => 'primary',
                    }),
                    
                TextColumn::make('created_at')
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
            ])
            ->filters([
                SelectFilter::make('subscription_plan')
                    ->options(SubscriptionPlan::options()),
                    
                SelectFilter::make('user_type')
                    ->options(TargetUserType::options()),
            ])
            ->actions([
                EditAction::make(),
                DeleteAction::make(),
                
                Action::make('impersonate')
                    ->icon('heroicon-o-eye')
                    ->action(fn (User $record) => auth()->login($record))
                    ->requiresConfirmation(),
            ])
            ->bulkActions([
                BulkAction::make('delete')
                    ->requiresConfirmation()
                    ->action(fn (Collection $records) => $records->each->delete()),
            ])
            ->defaultSort('created_at', 'desc');
    }
}
```

### Table Column Patterns
```php
// Text columns with formatting
TextColumn::make('title')
    ->searchable()
    ->sortable()
    ->limit(50),

// Badge columns
TextColumn::make('status')
    ->badge()
    ->color(fn (string $state) => match ($state) {
        'active' => 'success',
        'inactive' => 'danger',
        'pending' => 'warning',
        default => 'gray',
    }),

// Relationship columns
TextColumn::make('user.name')
    ->searchable()
    ->sortable(),

// Date columns
TextColumn::make('created_at')
    ->dateTime()
    ->sortable()
    ->toggleable(),

// Toggle columns
ToggleColumn::make('is_active')
    ->disabled(fn ($record) => !auth()->user()->can('update', $record)),
```

## Page Classes

### List Page
```php
<?php

namespace App\Filament\Resources\Users\Pages;

use App\Filament\Resources\Users\UserResource;
use Filament\Actions\CreateAction;
use Filament\Resources\Pages\ListRecords;

class ListUsers extends ListRecords
{
    protected static string $resource = UserResource::class;

    protected function getHeaderActions(): array
    {
        return [
            CreateAction::make(),
        ];
    }
}
```

### Create/Edit Pages
```php
<?php

namespace App\Filament\Resources\Users\Pages;

use App\Filament\Resources\Users\UserResource;
use Filament\Actions\DeleteAction;
use Filament\Resources\Pages\EditRecord;

class EditUser extends EditRecord
{
    protected static string $resource = UserResource::class;

    protected function getHeaderActions(): array
    {
        return [
            DeleteAction::make(),
        ];
    }
    
    protected function getRedirectUrl(): string
    {
        return $this->getResource()::getUrl('index');
    }
}
```

## Actions & Forms

### Custom Actions
```php
Action::make('approve')
    ->icon('heroicon-o-check')
    ->color('success')
    ->requiresConfirmation()
    ->action(function (User $record) {
        $record->update(['status' => 'approved']);
        Notification::make()
            ->success()
            ->title('User approved')
            ->send();
    })
    ->visible(fn (User $record) => $record->status === 'pending'),

// Bulk actions
BulkAction::make('approve')
    ->icon('heroicon-o-check')
    ->color('success')
    ->requiresConfirmation()
    ->action(function (Collection $records) {
        $records->each->update(['status' => 'approved']);
        Notification::make()
            ->success()
            ->title('Users approved')
            ->send();
    }),
```

### Form Actions
```php
Actions::make([
    Action::make('save')
        ->label('Save')
        ->submit('save'),
        
    Action::make('save_and_create_another')
        ->label('Save & Create Another')
        ->submit('save_and_create_another'),
        
    Action::make('cancel')
        ->label('Cancel')
        ->url($this->getResource()::getUrl('index')),
]),
```

## Filters & Search

### Table Filters
```php
SelectFilter::make('status')
    ->options([
        'active' => 'Active',
        'inactive' => 'Inactive',
        'pending' => 'Pending',
    ]),

TernaryFilter::make('is_verified')
    ->label('Verification Status')
    ->placeholder('All users')
    ->trueLabel('Verified users')
    ->falseLabel('Unverified users'),

Filter::make('created_at')
    ->form([
        DatePicker::make('created_from'),
        DatePicker::make('created_until'),
    ])
    ->query(function (Builder $query, array $data): Builder {
        return $query
            ->when(
                $data['created_from'],
                fn (Builder $query, $date): Builder => $query->whereDate('created_at', '>=', $date),
            )
            ->when(
                $data['created_until'],
                fn (Builder $query, $date): Builder => $query->whereDate('created_at', '<=', $date),
            );
    }),
```

### Global Search
```php
public static function getGlobalSearchResultTitle(Model $record): string
{
    return $record->name;
}

public static function getGlobalSearchResultDetails(Model $record): array
{
    return [
        'Email' => $record->email,
        'Status' => $record->status,
    ];
}

public static function getGloballySearchableAttributes(): array
{
    return ['name', 'email'];
}
```

## Widgets

### Stats Widget
```php
<?php

namespace App\Filament\Widgets;

use App\Models\User;
use Filament\Widgets\StatsOverviewWidget as BaseWidget;
use Filament\Widgets\StatsOverviewWidget\Stat;

class UserStatsWidget extends BaseWidget
{
    protected function getStats(): array
    {
        return [
            Stat::make('Total Users', User::count())
                ->description('All registered users')
                ->descriptionIcon('heroicon-m-users')
                ->color('success'),
                
            Stat::make('Active Users', User::where('status', 'active')->count())
                ->description('Users with active status')
                ->descriptionIcon('heroicon-m-check-circle')
                ->color('success'),
                
            Stat::make('Premium Users', User::where('subscription_plan', 'premium')->count())
                ->description('Users with premium subscription')
                ->descriptionIcon('heroicon-m-star')
                ->color('warning'),
        ];
    }
}
```

### Chart Widget
```php
<?php

namespace App\Filament\Widgets;

use App\Models\User;
use Filament\Widgets\ChartWidget;

class UserRegistrationChart extends ChartWidget
{
    protected static ?string $heading = 'User Registrations';

    protected function getData(): array
    {
        $data = User::selectRaw('DATE(created_at) as date, COUNT(*) as count')
            ->where('created_at', '>=', now()->subDays(30))
            ->groupBy('date')
            ->orderBy('date')
            ->get();

        return [
            'datasets' => [
                [
                    'label' => 'Registrations',
                    'data' => $data->pluck('count'),
                    'backgroundColor' => 'rgba(59, 130, 246, 0.5)',
                    'borderColor' => 'rgb(59, 130, 246)',
                ],
            ],
            'labels' => $data->pluck('date'),
        ];
    }

    protected function getType(): string
    {
        return 'line';
    }
}
```

## Navigation & Menu

### Custom Navigation
```php
// In AppServiceProvider
Filament::serving(function () {
    Filament::registerNavigationGroups([
        'User Management',
        'Content Management',
        'System',
    ]);
});

// In Resource
protected static ?string $navigationGroup = 'User Management';
protected static ?int $navigationSort = 1;
```

## Permissions & Authorization

### Resource Permissions
```php
public static function canViewAny(): bool
{
    return auth()->user()->can('viewAny', static::getModel());
}

public static function canCreate(): bool
{
    return auth()->user()->can('create', static::getModel());
}

public static function canEdit(Model $record): bool
{
    return auth()->user()->can('update', $record);
}

public static function canDelete(Model $record): bool
{
    return auth()->user()->can('delete', $record);
}
```

### Action Permissions
```php
Action::make('approve')
    ->visible(fn (User $record) => auth()->user()->can('approve', $record))
    ->action(function (User $record) {
        // Action logic
    }),
```

## Best Practices

### 1. Organization
- Group related resources in subdirectories
- Use separate classes for forms, tables, and pages
- Follow consistent naming conventions
- Keep resources focused on single models

### 2. Performance
- Use `preload()` for relationship selects
- Implement proper indexing for searchable columns
- Use `toggleable()` for less important columns
- Optimize queries with eager loading

### 3. User Experience
- Provide clear labels and descriptions
- Use appropriate icons and colors
- Implement proper validation
- Show helpful error messages

### 4. Security
- Implement proper authorization checks
- Validate all user input
- Use policies for model permissions
- Sanitize output in custom columns

### 5. Maintainability
- Use enum classes for options
- Create reusable form components
- Implement consistent styling
- Document complex logic