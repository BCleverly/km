---
description: Filament admin panel development patterns and best practices for the Kink Master platform
globs: app/Filament/**/*.php
---

# Filament Admin Panel Patterns & Best Practices

## Filament Architecture in Kink Master

This project uses Filament v4 for rapid admin panel development. All admin interfaces follow consistent patterns for maintainability and user experience.

## Resource Structure

### Basic Resource Template
```php
<?php

namespace App\Filament\Resources;

use App\Filament\Resources\TaskResource\Pages;
use App\Models\Tasks\Task;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;

class TaskResource extends Resource
{
    protected static ?string $model = Task::class;

    protected static ?string $navigationIcon = 'heroicon-o-clipboard-document-list';

    protected static ?string $navigationGroup = 'Content Management';

    protected static ?int $navigationSort = 1;

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\Section::make('Task Details')
                    ->schema([
                        Forms\Components\TextInput::make('title')
                            ->required()
                            ->maxLength(255),
                            
                        Forms\Components\Textarea::make('description')
                            ->required()
                            ->rows(4),
                            
                        Forms\Components\Select::make('difficulty_level')
                            ->options(range(1, 10))
                            ->required()
                            ->default(1),
                            
                        Forms\Components\Select::make('target_user_type')
                            ->options(TargetUserType::class)
                            ->required(),
                            
                        Forms\Components\Select::make('user_id')
                            ->label('Author')
                            ->relationship('author', 'name')
                            ->required(),
                            
                        Forms\Components\Select::make('status')
                            ->options(ContentStatus::class)
                            ->required()
                            ->default(ContentStatus::Pending),
                            
                        Forms\Components\Toggle::make('is_premium')
                            ->label('Premium Content'),
                    ])
                    ->columns(2),
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\TextColumn::make('title')
                    ->searchable()
                    ->sortable(),
                    
                Tables\Columns\TextColumn::make('author.name')
                    ->label('Author')
                    ->searchable()
                    ->sortable(),
                    
                Tables\Columns\TextColumn::make('difficulty_level')
                    ->sortable()
                    ->badge()
                    ->color(fn (int $state): string => match (true) {
                        $state <= 3 => 'success',
                        $state <= 6 => 'warning',
                        default => 'danger',
                    }),
                    
                Tables\Columns\TextColumn::make('target_user_type')
                    ->badge()
                    ->color(fn (TargetUserType $state): string => match ($state) {
                        TargetUserType::Male => 'blue',
                        TargetUserType::Female => 'pink',
                        TargetUserType::Couple => 'purple',
                        TargetUserType::Any => 'gray',
                    }),
                    
                Tables\Columns\TextColumn::make('status')
                    ->badge()
                    ->color(fn (ContentStatus $state): string => $state->color()),
                    
                Tables\Columns\IconColumn::make('is_premium')
                    ->boolean()
                    ->label('Premium'),
                    
                Tables\Columns\TextColumn::make('view_count')
                    ->sortable(),
                    
                Tables\Columns\TextColumn::make('created_at')
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
            ])
            ->filters([
                Tables\Filters\SelectFilter::make('status')
                    ->options(ContentStatus::class),
                    
                Tables\Filters\SelectFilter::make('target_user_type')
                    ->options(TargetUserType::class),
                    
                Tables\Filters\TernaryFilter::make('is_premium')
                    ->label('Premium Content'),
                    
                Tables\Filters\Filter::make('created_at')
                    ->form([
                        Forms\Components\DatePicker::make('created_from'),
                        Forms\Components\DatePicker::make('created_until'),
                    ])
                    ->query(function (Builder $query, array $data): Builder {
                        return $query
                            ->when(
                                $data['created_from'],
                                fn (Builder $query, $date): Builder => $query->whereDate('created_at', '>=', $date),
                            )
                            ->when(
                                $data['created_until'],
                                fn (Builder $query, $date): Builder => $query->whereDate('created_at', '<=', $date),
                            );
                    }),
            ])
            ->actions([
                Tables\Actions\ViewAction::make(),
                Tables\Actions\EditAction::make(),
                Tables\Actions\DeleteAction::make(),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ])
            ->defaultSort('created_at', 'desc');
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListTasks::route('/'),
            'create' => Pages\CreateTask::route('/create'),
            'view' => Pages\ViewTask::route('/{record}'),
            'edit' => Pages\EditTask::route('/{record}/edit'),
        ];
    }
}
```

## Form Component Patterns

### Section Organization
```php
Forms\Components\Section::make('Basic Information')
    ->schema([
        Forms\Components\TextInput::make('title')
            ->required()
            ->maxLength(255)
            ->columnSpanFull(),
            
        Forms\Components\Textarea::make('description')
            ->required()
            ->rows(4)
            ->columnSpanFull(),
    ])
    ->columns(2),

Forms\Components\Section::make('Settings')
    ->schema([
        Forms\Components\Select::make('status')
            ->options(ContentStatus::class)
            ->required(),
            
        Forms\Components\Toggle::make('is_premium')
            ->label('Premium Content'),
    ])
    ->collapsible(),
```

### Relationship Fields
```php
// Simple relationship
Forms\Components\Select::make('user_id')
    ->label('Author')
    ->relationship('author', 'name')
    ->searchable()
    ->preload()
    ->required(),

// Relationship with custom query
Forms\Components\Select::make('user_id')
    ->label('Author')
    ->relationship(
        name: 'author',
        titleAttribute: 'name',
        modifyQueryUsing: fn (Builder $query) => $query->where('active', true)
    )
    ->searchable()
    ->required(),

// Belongs to many relationship
Forms\Components\Select::make('tags')
    ->relationship('tags', 'name')
    ->multiple()
    ->searchable()
    ->preload(),
```

### Enum Integration
```php
Forms\Components\Select::make('status')
    ->options(ContentStatus::class)
    ->required()
    ->default(ContentStatus::Pending),

Forms\Components\Select::make('target_user_type')
    ->options(TargetUserType::class)
    ->required()
    ->searchable(),
```

### Conditional Fields
```php
Forms\Components\Select::make('type')
    ->options([
        'task' => 'Task',
        'reward' => 'Reward',
        'punishment' => 'Punishment',
    ])
    ->required()
    ->live(),

Forms\Components\TextInput::make('difficulty_level')
    ->visible(fn (Get $get): bool => $get('type') === 'task')
    ->required(fn (Get $get): bool => $get('type') === 'task'),
```

## Table Component Patterns

### Column Types
```php
// Text columns
Tables\Columns\TextColumn::make('title')
    ->searchable()
    ->sortable()
    ->limit(50),

// Badge columns
Tables\Columns\TextColumn::make('status')
    ->badge()
    ->color(fn (ContentStatus $state): string => $state->color()),

// Icon columns
Tables\Columns\IconColumn::make('is_premium')
    ->boolean()
    ->label('Premium'),

// Image columns
Tables\Columns\ImageColumn::make('author.profile_picture_url')
    ->label('Author')
    ->circular(),

// Date columns
Tables\Columns\TextColumn::make('created_at')
    ->dateTime()
    ->sortable()
    ->toggleable(isToggledHiddenByDefault: true),
```

### Custom Column Colors
```php
Tables\Columns\TextColumn::make('difficulty_level')
    ->badge()
    ->color(fn (int $state): string => match (true) {
        $state <= 3 => 'success',
        $state <= 6 => 'warning',
        default => 'danger',
    }),

Tables\Columns\TextColumn::make('target_user_type')
    ->badge()
    ->color(fn (TargetUserType $state): string => match ($state) {
        TargetUserType::Male => 'blue',
        TargetUserType::Female => 'pink',
        TargetUserType::Couple => 'purple',
        TargetUserType::Any => 'gray',
    }),
```

### Filters
```php
Tables\Filters\SelectFilter::make('status')
    ->options(ContentStatus::class),

Tables\Filters\SelectFilter::make('target_user_type')
    ->options(TargetUserType::class),

Tables\Filters\TernaryFilter::make('is_premium')
    ->label('Premium Content'),

Tables\Filters\Filter::make('created_at')
    ->form([
        Forms\Components\DatePicker::make('created_from'),
        Forms\Components\DatePicker::make('created_until'),
    ])
    ->query(function (Builder $query, array $data): Builder {
        return $query
            ->when(
                $data['created_from'],
                fn (Builder $query, $date): Builder => $query->whereDate('created_at', '>=', $date),
            )
            ->when(
                $data['created_until'],
                fn (Builder $query, $date): Builder => $query->whereDate('created_at', '<=', $date),
            );
    }),
```

## Actions Patterns

### Table Actions
```php
Tables\Actions\ActionGroup::make([
    Tables\Actions\ViewAction::make(),
    Tables\Actions\EditAction::make(),
    Tables\Actions\DeleteAction::make(),
]),

// Custom actions
Tables\Actions\Action::make('approve')
    ->icon('heroicon-o-check-circle')
    ->color('success')
    ->action(function (Task $record) {
        $record->update(['status' => ContentStatus::Approved]);
        Notification::make()
            ->title('Task approved')
            ->success()
            ->send();
    })
    ->visible(fn (Task $record): bool => $record->status === ContentStatus::Pending),
```

### Bulk Actions
```php
Tables\Actions\BulkActionGroup::make([
    Tables\Actions\DeleteBulkAction::make(),
    
    Tables\Actions\BulkAction::make('approve')
        ->icon('heroicon-o-check-circle')
        ->color('success')
        ->action(function (Collection $records) {
            $records->each->update(['status' => ContentStatus::Approved]);
            Notification::make()
                ->title('Tasks approved')
                ->success()
                ->send();
        })
        ->deselectRecordsAfterCompletion(),
]),
```

## Page Patterns

### Custom Page Actions
```php
<?php

namespace App\Filament\Resources\TaskResource\Pages;

use App\Filament\Resources\TaskResource;
use Filament\Actions;
use Filament\Resources\Pages\ListRecords;

class ListTasks extends ListRecords
{
    protected static string $resource = TaskResource::class;

    protected function getHeaderActions(): array
    {
        return [
            Actions\CreateAction::make(),
            
            Actions\Action::make('export')
                ->icon('heroicon-o-arrow-down-tray')
                ->action(function () {
                    // Export logic
                }),
        ];
    }
}
```

### View Page with Tabs
```php
<?php

namespace App\Filament\Resources\TaskResource\Pages;

use App\Filament\Resources\TaskResource;
use Filament\Resources\Pages\ViewRecord;
use Filament\Infolists;
use Filament\Infolists\Infolist;

class ViewTask extends ViewRecord
{
    protected static string $resource = TaskResource::class;

    public function infolist(Infolist $infolist): Infolist
    {
        return $infolist
            ->schema([
                Infolists\Components\Tabs::make('Task Details')
                    ->tabs([
                        Infolists\Components\Tabs\Tab::make('Basic Info')
                            ->schema([
                                Infolists\Components\TextEntry::make('title'),
                                Infolists\Components\TextEntry::make('description'),
                                Infolists\Components\TextEntry::make('difficulty_level'),
                            ]),
                            
                        Infolists\Components\Tabs\Tab::make('Metadata')
                            ->schema([
                                Infolists\Components\TextEntry::make('author.name')
                                    ->label('Author'),
                                Infolists\Components\TextEntry::make('status')
                                    ->badge()
                                    ->color(fn (ContentStatus $state): string => $state->color()),
                                Infolists\Components\TextEntry::make('created_at')
                                    ->dateTime(),
                            ]),
                    ]),
            ]);
    }
}
```

## Navigation Patterns

### Navigation Groups
```php
protected static ?string $navigationGroup = 'Content Management';

protected static ?int $navigationSort = 1;

protected static ?string $navigationIcon = 'heroicon-o-clipboard-document-list';
```

### Conditional Navigation
```php
public static function shouldRegisterNavigation(): bool
{
    return auth()->user()->hasRole(['admin', 'moderator']);
}

public static function getNavigationLabel(): string
{
    return 'Tasks';
}

public static function getNavigationBadge(): ?string
{
    return static::getModel()::pending()->count();
}

public static function getNavigationBadgeColor(): ?string
{
    return 'warning';
}
```

## Widget Patterns

### Stats Widget
```php
<?php

namespace App\Filament\Widgets;

use App\Models\Tasks\Task;
use Filament\Widgets\StatsOverviewWidget as BaseWidget;
use Filament\Widgets\StatsOverviewWidget\Stat;

class TaskStatsOverview extends BaseWidget
{
    protected function getStats(): array
    {
        return [
            Stat::make('Total Tasks', Task::count())
                ->description('All tasks in system')
                ->descriptionIcon('heroicon-m-arrow-trending-up')
                ->color('success'),
                
            Stat::make('Pending Tasks', Task::pending()->count())
                ->description('Awaiting approval')
                ->descriptionIcon('heroicon-m-clock')
                ->color('warning'),
                
            Stat::make('Approved Tasks', Task::approved()->count())
                ->description('Ready for users')
                ->descriptionIcon('heroicon-m-check-circle')
                ->color('success'),
        ];
    }
}
```

### Chart Widget
```php
<?php

namespace App\Filament\Widgets;

use App\Models\Tasks\Task;
use Filament\Widgets\ChartWidget;
use Illuminate\Support\Carbon;

class TaskCreationChart extends ChartWidget
{
    protected static ?string $heading = 'Task Creation Over Time';

    protected function getData(): array
    {
        $data = Task::selectRaw('DATE(created_at) as date, COUNT(*) as count')
            ->where('created_at', '>=', Carbon::now()->subDays(30))
            ->groupBy('date')
            ->orderBy('date')
            ->get();

        return [
            'datasets' => [
                [
                    'label' => 'Tasks Created',
                    'data' => $data->pluck('count'),
                    'borderColor' => 'rgb(59, 130, 246)',
                    'backgroundColor' => 'rgba(59, 130, 246, 0.1)',
                ],
            ],
            'labels' => $data->pluck('date'),
        ];
    }

    protected function getType(): string
    {
        return 'line';
    }
}
```

## Testing Filament Resources

### Resource Tests
```php
<?php

use App\Filament\Resources\TaskResource;
use App\Models\Tasks\Task;
use App\Models\User;
use Filament\Tables\Actions\DeleteAction;
use Livewire\Livewire;

it('can list tasks', function () {
    $user = User::factory()->create();
    $user->assignRole('admin');
    
    $tasks = Task::factory()->count(3)->create();
    
    Livewire::actingAs($user)
        ->test(TaskResource\Pages\ListTasks::class)
        ->assertCanSeeTableRecords($tasks);
});

it('can create task', function () {
    $user = User::factory()->create();
    $user->assignRole('admin');
    
    Livewire::actingAs($user)
        ->test(TaskResource\Pages\CreateTask::class)
        ->fillForm([
            'title' => 'Test Task',
            'description' => 'Test Description',
            'difficulty_level' => 5,
            'target_user_type' => TargetUserType::Any,
            'user_id' => $user->id,
            'status' => ContentStatus::Pending,
        ])
        ->call('create')
        ->assertHasNoFormErrors();
        
    $this->assertDatabaseHas('tasks', [
        'title' => 'Test Task',
        'description' => 'Test Description',
    ]);
});

it('can delete task', function () {
    $user = User::factory()->create();
    $user->assignRole('admin');
    
    $task = Task::factory()->create();
    
    Livewire::actingAs($user)
        ->test(TaskResource\Pages\ListTasks::class)
        ->callTableAction(DeleteAction::class, $task);
        
    $this->assertDatabaseMissing('tasks', [
        'id' => $task->id,
    ]);
});
```

## Best Practices

### 1. Resource Organization
- Group related resources in navigation groups
- Use consistent naming conventions
- Organize pages logically

### 2. Form Design
- Use sections to group related fields
- Implement proper validation
- Use conditional fields for dynamic forms
- Leverage relationships for dropdowns

### 3. Table Design
- Use appropriate column types
- Implement search and filtering
- Add meaningful actions
- Use badges and colors for status

### 4. Performance
- Use eager loading for relationships
- Implement proper indexing
- Use pagination for large datasets
- Optimize queries in filters

### 5. User Experience
- Provide clear navigation
- Use consistent icons and colors
- Implement proper notifications
- Add helpful descriptions and labels