---
description: Livewire component patterns and Alpine.js integration guidelines for the Kink Master platform
globs: app/Livewire/**/*.php,resources/views/livewire/**/*.blade.php
---

# Livewire Component Patterns & Alpine.js Integration

## Livewire Architecture in Kink Master

This project uses Livewire 3 for dynamic, server-side rendered components with Alpine.js for client-side interactions. All components follow consistent patterns for maintainability and performance.

## Component Structure

### Basic Component Template
```php
<?php

namespace App\Livewire;

use Livewire\Attributes\Layout;
use Livewire\Component;

class ExampleComponent extends Component
{
    public function render()
    {
        return view('livewire.example-component')
            ->layout('components.layouts.app', [
                'title' => 'Page Title - Kink Master'
            ]);
    }
}
```

### Component with Properties and Actions
```php
<?php

namespace App\Livewire;

use Livewire\Attributes\Layout;
use Livewire\Component;
use Livewire\Attributes\Validate;

class TaskComponent extends Component
{
    #[Validate('required|string|max:255')]
    public string $title = '';

    #[Validate('required|string')]
    public string $description = '';

    public bool $isSubmitting = false;

    public function save()
    {
        $this->validate();
        
        $this->isSubmitting = true;
        
        // Business logic here
        
        $this->isSubmitting = false;
        $this->reset(['title', 'description']);
        
        session()->flash('message', 'Task saved successfully!');
    }

    public function render()
    {
        return view('livewire.task-component');
    }
}
```

## Layout Patterns

### Standard Layout Usage
Always use the `components.layouts.app` layout for consistency:

```php
public function render()
{
    return view('livewire.dashboard')
        ->layout('components.layouts.app', [
            'title' => 'Dashboard - Kink Master'
        ]);
}
```

### Layout with Additional Data
```php
public function render()
{
    return view('livewire.user-profile')
        ->layout('components.layouts.app', [
            'title' => 'Profile - Kink Master',
            'description' => 'Manage your profile settings',
            'breadcrumbs' => [
                ['label' => 'Dashboard', 'url' => '/dashboard'],
                ['label' => 'Profile', 'url' => '/profile'],
            ]
        ]);
}
```

## Alpine.js Integration Patterns

### Toggle States (Preferred Pattern)
Use Alpine.js for UI toggles instead of Livewire state to avoid unnecessary HTTP requests:

```blade
<!-- Good: Alpine.js toggle -->
<div x-data="{ isOpen: false }">
    <button @click="isOpen = !isOpen" class="btn">
        Toggle
    </button>
    
    <div x-show="isOpen" x-transition class="mt-4">
        Content here
    </div>
</div>

<!-- Bad: Livewire toggle (wastes HTTP request) -->
<div>
    <button wire:click="$toggle('isOpen')" class="btn">
        Toggle
    </button>
    
    @if($isOpen)
        <div class="mt-4">Content here</div>
    @endif
</div>
```

### Complex Alpine.js Components
```blade
<div x-data="taskManager()" class="space-y-4">
    <div class="flex gap-4">
        <button @click="showCreateForm = true" class="btn btn-primary">
            Create Task
        </button>
        <button @click="refreshTasks()" class="btn btn-secondary">
            Refresh
        </button>
    </div>
    
    <div x-show="showCreateForm" x-transition class="card">
        <form @submit.prevent="createTask()">
            <input x-model="newTask.title" type="text" placeholder="Task title" class="input">
            <textarea x-model="newTask.description" placeholder="Description" class="textarea"></textarea>
            <button type="submit" :disabled="isSubmitting" class="btn btn-primary">
                <span x-show="!isSubmitting">Create Task</span>
                <span x-show="isSubmitting">Creating...</span>
            </button>
        </form>
    </div>
</div>

<script>
function taskManager() {
    return {
        showCreateForm: false,
        isSubmitting: false,
        newTask: {
            title: '',
            description: ''
        },
        
        createTask() {
            this.isSubmitting = true;
            
            // Call Livewire method
            @this.call('createTask', this.newTask).then(() => {
                this.newTask = { title: '', description: '' };
                this.showCreateForm = false;
                this.isSubmitting = false;
            });
        },
        
        refreshTasks() {
            @this.call('refreshTasks');
        }
    }
}
</script>
```

## Form Patterns

### Form Validation
```php
<?php

namespace App\Livewire\Forms;

use Livewire\Attributes\Validate;
use Livewire\Form;

class TaskForm extends Form
{
    #[Validate('required|string|max:255')]
    public string $title = '';

    #[Validate('required|string')]
    public string $description = '';

    #[Validate('required|integer|min:1|max:10')]
    public int $difficulty_level = 1;

    #[Validate('required')]
    public $target_user_type;

    public function rules(): array
    {
        return [
            'title' => 'required|string|max:255',
            'description' => 'required|string',
            'difficulty_level' => 'required|integer|min:1|max:10',
            'target_user_type' => 'required',
        ];
    }

    public function save()
    {
        $this->validate();
        
        // Save logic here
        
        $this->reset();
    }
}
```

### Using Forms in Components
```php
<?php

namespace App\Livewire;

use App\Livewire\Forms\TaskForm;
use Livewire\Component;

class CreateTask extends Component
{
    public TaskForm $form;

    public function save()
    {
        $this->form->save();
        
        session()->flash('message', 'Task created successfully!');
        
        return $this->redirect('/tasks');
    }

    public function render()
    {
        return view('livewire.create-task');
    }
}
```

## Real-time Features

### WebSocket Integration
```php
<?php

namespace App\Livewire;

use Livewire\Component;
use Livewire\Attributes\On;

class TaskDashboard extends Component
{
    public $tasks = [];
    public $currentTask = null;

    public function mount()
    {
        $this->loadTasks();
    }

    #[On('task-assigned')]
    public function handleTaskAssigned($taskId)
    {
        $this->loadTasks();
        $this->dispatch('show-notification', [
            'message' => 'New task assigned!',
            'type' => 'success'
        ]);
    }

    #[On('task-completed')]
    public function handleTaskCompleted($taskId)
    {
        $this->loadTasks();
        $this->dispatch('show-notification', [
            'message' => 'Task completed!',
            'type' => 'success'
        ]);
    }

    public function loadTasks()
    {
        $this->tasks = auth()->user()->assignedTasks()
            ->with('task')
            ->latest()
            ->get();
    }

    public function render()
    {
        return view('livewire.task-dashboard');
    }
}
```

### Real-time Notifications
```blade
<div x-data="notificationManager()" class="fixed top-4 right-4 z-50">
    <div x-show="notifications.length > 0" class="space-y-2">
        <template x-for="notification in notifications" :key="notification.id">
            <div x-show="notification.visible" 
                 x-transition:enter="transition ease-out duration-300"
                 x-transition:enter-start="opacity-0 transform translate-x-full"
                 x-transition:enter-end="opacity-100 transform translate-x-0"
                 x-transition:leave="transition ease-in duration-200"
                 x-transition:leave-start="opacity-100 transform translate-x-0"
                 x-transition:leave-end="opacity-0 transform translate-x-full"
                 class="bg-white border border-gray-200 rounded-lg shadow-lg p-4 max-w-sm">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="font-medium" x-text="notification.message"></p>
                    </div>
                    <button @click="removeNotification(notification.id)" class="text-gray-400 hover:text-gray-600">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                </div>
            </div>
        </template>
    </div>
</div>

<script>
function notificationManager() {
    return {
        notifications: [],
        
        init() {
            // Listen for Livewire events
            Livewire.on('show-notification', (data) => {
                this.addNotification(data[0]);
            });
        },
        
        addNotification(data) {
            const notification = {
                id: Date.now(),
                message: data.message,
                type: data.type || 'info',
                visible: true
            };
            
            this.notifications.push(notification);
            
            // Auto-remove after 5 seconds
            setTimeout(() => {
                this.removeNotification(notification.id);
            }, 5000);
        },
        
        removeNotification(id) {
            const index = this.notifications.findIndex(n => n.id === id);
            if (index > -1) {
                this.notifications[index].visible = false;
                setTimeout(() => {
                    this.notifications.splice(index, 1);
                }, 200);
            }
        }
    }
}
</script>
```

## Performance Patterns

### Lazy Loading
```php
<?php

namespace App\Livewire;

use Livewire\Component;
use Livewire\Attributes\Lazy;

#[Lazy]
class HeavyComponent extends Component
{
    public function render()
    {
        return view('livewire.heavy-component');
    }
}
```

### Deferred Updates
```php
<?php

namespace App\Livewire;

use Livewire\Component;

class SearchComponent extends Component
{
    public string $search = '';

    public function updatedSearch()
    {
        // This will be deferred until the next request
        $this->searchResults = $this->performSearch();
    }

    public function render()
    {
        return view('livewire.search-component');
    }
}
```

### Pagination
```php
<?php

namespace App\Livewire;

use Livewire\Component;
use Livewire\WithPagination;

class TaskList extends Component
{
    use WithPagination;

    public function render()
    {
        $tasks = auth()->user()->assignedTasks()
            ->with('task')
            ->paginate(10);

        return view('livewire.task-list', compact('tasks'));
    }
}
```

## Blade Template Patterns

### Using @class Directive
Use Blade's `@class` directive for complex CSS class handling:

```blade
<button @class([
    'btn',
    'btn-primary' => $isActive,
    'btn-secondary' => !$isActive,
    'btn-disabled' => $isDisabled,
    'opacity-50' => $isDisabled,
])>
    {{ $label }}
</button>
```

### Conditional Rendering
```blade
<div>
    @if($user->hasActiveTask())
        <div class="card">
            <h3>Current Task</h3>
            <p>{{ $user->currentTask->title }}</p>
            <div class="flex gap-2">
                <button wire:click="completeTask" class="btn btn-success">
                    I Completed This
                </button>
                <button wire:click="failTask" class="btn btn-danger">
                    I Failed This
                </button>
            </div>
        </div>
    @else
        <div class="card">
            <h3>No Active Task</h3>
            <button wire:click="requestNewTask" class="btn btn-primary">
                Get New Task
            </button>
        </div>
    @endif
</div>
```

### Loading States
```blade
<div>
    <button wire:click="save" 
            wire:loading.attr="disabled"
            wire:target="save"
            class="btn btn-primary">
        <span wire:loading.remove wire:target="save">Save</span>
        <span wire:loading wire:target="save">Saving...</span>
    </button>
    
    <div wire:loading wire:target="save" class="mt-4">
        <div class="loading-spinner"></div>
    </div>
</div>
```

## Testing Livewire Components

### Component Tests
```php
<?php

use App\Livewire\CreateTask;
use App\Models\User;
use Livewire\Livewire;

it('can create a task', function () {
    $user = User::factory()->create();
    
    Livewire::actingAs($user)
        ->test(CreateTask::class)
        ->set('form.title', 'Test Task')
        ->set('form.description', 'Test Description')
        ->set('form.difficulty_level', 5)
        ->set('form.target_user_type', TargetUserType::Any)
        ->call('save')
        ->assertHasNoErrors()
        ->assertRedirect('/tasks');
        
    $this->assertDatabaseHas('tasks', [
        'title' => 'Test Task',
        'description' => 'Test Description',
        'difficulty_level' => 5,
    ]);
});
```

### Form Validation Tests
```php
it('validates required fields', function () {
    Livewire::test(CreateTask::class)
        ->set('form.title', '')
        ->set('form.description', '')
        ->call('save')
        ->assertHasErrors(['form.title', 'form.description']);
});
```

## Best Practices

### 1. Component Organization
- Group related components in subdirectories
- Use descriptive component names
- Keep components focused on single responsibilities

### 2. State Management
- Use Alpine.js for UI state (toggles, modals, etc.)
- Use Livewire for server state (data, forms, etc.)
- Avoid unnecessary Livewire state for client-only interactions

### 3. Performance
- Use lazy loading for heavy components
- Implement proper pagination
- Use deferred updates for search/filtering
- Minimize data loading in components

### 4. Security
- Always validate user input
- Use form objects for complex validation
- Implement proper authorization checks
- Sanitize output in Blade templates

### 5. User Experience
- Provide loading states for all actions
- Use real-time updates where appropriate
- Implement proper error handling
- Use consistent UI patterns