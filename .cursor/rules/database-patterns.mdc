---
description: Database patterns, migrations, and model relationships for the Kink Master platform
globs: app/Models/**/*.php,database/migrations/**/*.php
---

# Database Patterns & Model Conventions

## Model Structure & Conventions

### Basic Model Template
```php
<?php

declare(strict_types=1);

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Spatie\Activitylog\Traits\LogsActivity;

class ExampleModel extends Model
{
    use HasFactory, LogsActivity;

    protected $fillable = [
        'field1',
        'field2',
        'field3',
    ];

    protected function casts(): array
    {
        return [
            'field1' => 'boolean',
            'field2' => 'datetime',
            'field3' => \App\Enums\ExampleEnum::class,
        ];
    }

    public function user(): BelongsTo
    {
        return $this->belongsTo(User::class);
    }

    public function items(): HasMany
    {
        return $this->hasMany(Item::class);
    }
}
```

## Migration Patterns

### Standard Migration Structure
```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('table_name', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained()->onDelete('cascade');
            $table->string('title');
            $table->text('description')->nullable();
            $table->integer('status')->default(1);
            $table->timestamps();
            
            // Indexes for performance
            $table->index(['user_id', 'status']);
            $table->index(['status', 'created_at']);
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('table_name');
    }
};
```

### Foreign Key Patterns
- Always use `constrained()` for foreign keys
- Use `onDelete('cascade')` for dependent data
- Use `onDelete('set null')` for optional references
- Always add indexes for foreign key columns

### Status Fields
- Use integer fields instead of database enums
- Cast to PHP enum classes in models
- Default status values should be 1 (first enum case)
- Always index status fields for performance

## Model Relationships

### Common Relationship Patterns
```php
// BelongsTo with foreign key specification
public function assignedBy(): BelongsTo
{
    return $this->belongsTo(User::class, 'assigned_by');
}

// HasMany with conditions
public function comments(): HasMany
{
    return $this->hasMany(Comment::class, 'commentable_id')
        ->where('commentable_type', self::class)
        ->approved()
        ->orderBy('created_at', 'asc');
}

// Polymorphic relationships
public function comments(): MorphMany
{
    return $this->morphMany(Comment::class, 'commentable');
}
```

### Eager Loading Patterns
```php
// Always eager load relationships in queries
$tasks = Task::with(['user', 'outcomes', 'comments'])->get();

// Use with() in model defaults for common relationships
protected $with = ['user', 'profile'];

// Conditional eager loading
$query->when($includeComments, function ($query) {
    $query->with('comments');
});
```

## Model Casts & Attributes

### Casts Method Pattern
Use the `casts()` method instead of the `$casts` property:

```php
protected function casts(): array
{
    return [
        'status' => CoupleTaskStatus::class,
        'assigned_at' => 'datetime',
        'deadline_at' => 'datetime',
        'is_public' => 'boolean',
        'metadata' => 'array',
    ];
}
```

### Custom Attributes
```php
public function getFullNameAttribute(): string
{
    return "{$this->first_name} {$this->last_name}";
}

// Using Attribute class for complex logic
protected function status(): Attribute
{
    return Attribute::make(
        get: fn (int $value) => CoupleTaskStatus::from($value),
        set: fn (CoupleTaskStatus $value) => $value->value,
    );
}
```

## Model Scopes

### Query Scopes
```php
// Public scopes
public function scopePublic($query)
{
    return $query->where('is_public', true);
}

public function scopeForUser($query, User $user)
{
    return $query->where('user_id', $user->id);
}

public function scopeRecent($query, int $limit = 10)
{
    return $query->orderBy('created_at', 'desc')->limit($limit);
}

// Local scopes with parameters
public function scopeByStatus($query, int $status)
{
    return $query->where('status', $status);
}
```

## Model Events & Boot

### Model Boot Pattern
```php
protected static function boot()
{
    parent::boot();

    static::creating(function ($model) {
        // Validation logic
        if ($model->assigned_by === $model->assigned_to) {
            throw new \InvalidArgumentException('A user cannot assign tasks to themselves.');
        }
    });

    static::created(function ($model) {
        // Post-creation logic
        $model->user->notify(new TaskAssigned($model));
    });
}
```

## Activity Logging

### Spatie Activity Log Integration
```php
use Spatie\Activitylog\Traits\LogsActivity;
use Spatie\Activitylog\LogOptions;

class Task extends Model
{
    use LogsActivity;

    public function getActivitylogOptions(): LogOptions
    {
        return LogOptions::defaults()
            ->logOnly(['title', 'description', 'status'])
            ->logOnlyDirty()
            ->dontSubmitEmptyLogs();
    }
}
```

## Media Library Integration

### Spatie Media Library Patterns
```php
use Spatie\MediaLibrary\HasMedia;
use Spatie\MediaLibrary\InteractsWithMedia;
use Spatie\MediaLibrary\MediaCollections\Models\Media;

class Profile extends Model implements HasMedia
{
    use InteractsWithMedia;

    public function registerMediaCollections(): void
    {
        $this->addMediaCollection('profile_pictures')
            ->acceptsMimeTypes(['image/jpeg', 'image/png', 'image/gif', 'image/webp'])
            ->singleFile();

        $this->addMediaCollection('cover_photos')
            ->acceptsMimeTypes(['image/jpeg', 'image/png', 'image/gif', 'image/webp'])
            ->singleFile();
    }

    public function registerMediaConversions(?Media $media = null): void
    {
        $this->addMediaConversion('thumb')
            ->width(150)
            ->height(150)
            ->sharpen(10);
    }
}
```

## Performance Patterns

### Database Indexing
- Always index foreign key columns
- Index frequently queried columns (status, created_at, user_id)
- Use composite indexes for common query patterns
- Index columns used in WHERE clauses

### Query Optimization
```php
// Use select() to limit columns
$users = User::select(['id', 'name', 'email'])->get();

// Use chunk() for large datasets
User::chunk(100, function ($users) {
    foreach ($users as $user) {
        // Process user
    }
});

// Use cursor() for memory efficiency
foreach (User::cursor() as $user) {
    // Process user
}
```

## Validation Patterns

### Model Validation
```php
// Use model events for validation
protected static function boot()
{
    parent::boot();

    static::saving(function ($model) {
        if ($model->isDirty('status') && !$model->isValidStatusTransition()) {
            throw new \InvalidArgumentException('Invalid status transition');
        }
    });
}

// Custom validation methods
public function isValidStatusTransition(): bool
{
    $validTransitions = [
        CoupleTaskStatus::Pending->value => [CoupleTaskStatus::Completed->value, CoupleTaskStatus::Failed->value],
        CoupleTaskStatus::Completed->value => [CoupleTaskStatus::Thanked->value],
    ];

    $currentStatus = $this->getOriginal('status');
    $newStatus = $this->status->value;

    return in_array($newStatus, $validTransitions[$currentStatus] ?? []);
}
```

## Best Practices

### 1. Model Organization
- Group related models in subdirectories (e.g., `Models/Tasks/`)
- Use descriptive model names
- Keep models focused on single responsibilities

### 2. Relationship Naming
- Use descriptive relationship method names
- Use `assignedBy()` and `assignedTo()` for clarity
- Use `belongsTo` for single relationships, `hasMany` for collections

### 3. Data Integrity
- Use database constraints and foreign keys
- Implement model-level validation
- Use transactions for complex operations

### 4. Performance
- Always eager load relationships
- Use appropriate indexes
- Implement query scopes for common patterns
- Use pagination for large datasets

### 5. Security
- Use `$fillable` or `$guarded` arrays
- Validate input at the model level
- Use casts for type safety
- Implement proper authorization checks