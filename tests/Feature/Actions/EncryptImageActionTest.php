<?php

use App\Actions\Images\EncryptImageAction;
use Illuminate\Support\Facades\Storage;

beforeEach(function () {
    Storage::fake('local');
});

it('can encrypt image from file path', function () {
    $action = app(EncryptImageAction::class);
    
    // Create a temporary file with image content
    $content = "\xFF\xD8\xFF\xE0\x00\x10JFIF\x00\x01\x01\x01\x00H\x00H\x00\x00\xFF\xDB\x00C\x00\x08\x06\x06\x07\x06\x05\x08\x07\x07\x07\t\t\x08\n\x0C\x14\r\x0C\x0B\x0B\x0C\x19\x12\x13\x0F\x14\x1D\x1A\x1F\x1E\x1D\x1A\x1C\x1C $.' \",#\x1C\x1C(7),01444\x1F'9=82<.342\xFF\xC0\x00\x11\x08\x00\x01\x00\x01\x01\x01\x11\x00\x02\x11\x01\x03\x11\x01\xFF\xC4\x00\x14\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\xFF\xC4\x00\x14\x10\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xFF\xDA\x00\x0C\x03\x01\x00\x02\x11\x03\x11\x00\x3F\x00\xFF\xD9";
    
    $tempPath = 'temp/test.jpg';
    Storage::disk('local')->put($tempPath, $content);
    $fullPath = Storage::disk('local')->path($tempPath);
    
    $encryptedData = $action->handle($fullPath);
    
    expect($encryptedData)->not->toBeEmpty();
    expect($encryptedData)->not->toBe($content); // Should be encrypted
    
    // Clean up
    Storage::disk('local')->delete($tempPath);
});

it('can encrypt image from content', function () {
    $action = app(EncryptImageAction::class);
    
    $content = "\xFF\xD8\xFF\xE0\x00\x10JFIF\x00\x01\x01\x01\x00H\x00H\x00\x00\xFF\xDB\x00C\x00\x08\x06\x06\x07\x06\x05\x08\x07\x07\x07\t\t\x08\n\x0C\x14\r\x0C\x0B\x0B\x0C\x19\x12\x13\x0F\x14\x1D\x1A\x1F\x1E\x1D\x1A\x1C\x1C $.' \",#\x1C\x1C(7),01444\x1F'9=82<.342\xFF\xC0\x00\x11\x08\x00\x01\x00\x01\x01\x01\x11\x00\x02\x11\x01\x03\x11\x01\xFF\xC4\x00\x14\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\xFF\xC4\x00\x14\x10\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xFF\xDA\x00\x0C\x03\x01\x00\x02\x11\x03\x11\x00\x3F\x00\xFF\xD9";
    
    $encryptedData = $action->handleFromContent($content);
    
    expect($encryptedData)->not->toBeEmpty();
    expect($encryptedData)->not->toBe($content); // Should be encrypted
});

it('can encrypt image with metadata', function () {
    $action = app(EncryptImageAction::class);
    
    $content = "\xFF\xD8\xFF\xE0\x00\x10JFIF\x00\x01\x01\x01\x00H\x00H\x00\x00\xFF\xDB\x00C\x00\x08\x06\x06\x07\x06\x05\x08\x07\x07\x07\t\t\x08\n\x0C\x14\r\x0C\x0B\x0B\x0C\x19\x12\x13\x0F\x14\x1D\x1A\x1F\x1E\x1D\x1A\x1C\x1C $.' \",#\x1C\x1C(7),01444\x1F'9=82<.342\xFF\xC0\x00\x11\x08\x00\x01\x00\x01\x01\x01\x11\x00\x02\x11\x01\x03\x11\x01\xFF\xC4\x00\x14\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\xFF\xC4\x00\x14\x10\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xFF\xDA\x00\x0C\x03\x01\x00\x02\x11\x03\x11\x00\x3F\x00\xFF\xD9";
    
    $metadata = [
        'original_name' => 'test.jpg',
        'uploaded_by' => 'user123',
        'tags' => ['profile', 'avatar'],
    ];
    
    $encryptedData = $action->handleWithMetadata($content, $metadata);
    
    expect($encryptedData)->not->toBeEmpty();
    expect($encryptedData)->not->toBe($content); // Should be encrypted
});

it('throws exception for non-existent file', function () {
    $action = app(EncryptImageAction::class);
    
    expect(fn() => $action->handle('/non/existent/file.jpg'))
        ->toThrow(\InvalidArgumentException::class, 'File not found');
});

it('throws exception for empty content', function () {
    $action = app(EncryptImageAction::class);
    
    expect(fn() => $action->handleFromContent(''))
        ->toThrow(\InvalidArgumentException::class, 'Image content cannot be empty');
});